{
  "address": "0xD4171D5a25B3A684d1952Dd8141fA27911004f12",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__AlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NeuralNFTMarketplace__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__NoProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__NotApprovedForMarketplace",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NeuralNFTMarketplace__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NeuralNFTMarketplace__PriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeuralNFTMarketplace__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "ApprovedNftAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "LIST_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLATFORM_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "approveNftAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getListFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NeuralNFTMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlatformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd948b4746a37a6416663bb7ecae9ef504cd73c68410e95e7b39bfa075e3e7aa9",
  "receipt": {
    "to": null,
    "from": "0x0429A2Da7884CA14E53142988D5845952fE4DF6a",
    "contractAddress": "0xD4171D5a25B3A684d1952Dd8141fA27911004f12",
    "transactionIndex": 1,
    "gasUsed": "1816703",
    "logsBloom": "0x
    "blockHash": "0x0e1a6204251b37e842a4e774e9f78100d46438c1957e1532c3a0ece4a1241aff",
    "transactionHash": "0xd948b4746a37a6416663bb7ecae9ef504cd73c68410e95e7b39bfa075e3e7aa9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27282576,
        "transactionHash": "0xd948b4746a37a6416663bb7ecae9ef504cd73c68410e95e7b39bfa075e3e7aa9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000429a2da7884ca14e53142988d5845952fe4df6a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001338e2d5d902b4c0000000000000000000000000000000000000000000000001ca4206850660135000000000000000000000000000000000000000000001fe81395dea8270384880000000000000000000000000000000000000000000000001b70923af2d5d5e9000000000000000000000000000000000000000000001fe814c96cd58493afd4",
        "logIndex": 2,
        "blockHash": "0x0e1a6204251b37e842a4e774e9f78100d46438c1957e1532c3a0ece4a1241aff"
      }
    ],
    "blockNumber": 27282576,
    "cumulativeGasUsed": "1843618",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "969f7f4eaa81a6ad4d8b2ecc89b6863f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__AlreadyApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NeuralNFTMarketplace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__NoProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__NotApprovedForMarketplace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NeuralNFTMarketplace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NeuralNFTMarketplace__PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeuralNFTMarketplace__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"ApprovedNftAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LIST_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"approveNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NeuralNFTMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Gabriel Antony Xaviour\",\"details\":\"Contract secured and protected by a reentrancy guard.\",\"events\":{\"ItemListed(address,address,uint256,uint256)\":{\"details\":\"Fired for indexing data using theGraph protocol (https://thegraph.com/docs/en/about/)\"}},\"kind\":\"dev\",\"methods\":{\"approveNftAddress(address)\":{\"params\":{\"nftAddress\":\"The address of the contract of the NFT\"}},\"buyItem(address,uint256)\":{\"params\":{\"nftAddress\":\"The address of the contract of the NFT\",\"tokenId\":\"The ID of the NFT in the NFT contract\"}},\"cancelListing(address,uint256)\":{\"params\":{\"nftAddress\":\"The address of the contract of the NFT\",\"tokenId\":\"The ID of the NFT in the NFT contract\"}},\"listItem(address,uint256,uint256)\":{\"params\":{\"nftAddress\":\"The address of the contract of the NFT\",\"price\":\"The desired listing price by the seller\",\"tokenId\":\"The ID of the NFT in the NFT contract\"}},\"updateListing(address,uint256,uint256)\":{\"params\":{\"newPrice\":\"The updated listing price proposed by the seller\",\"nftAddress\":\"The address of the contract of the NFT\",\"tokenId\":\"The ID of the NFT in the NFT contract\"}},\"withdrawProceeds()\":{\"details\":\"Reentrancy guard put into action preventing multiple calls to this function\"}},\"title\":\"NeuralNFTMarketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveNftAddress(address)\":{\"notice\":\"Showcases all the NFTs in this nftAddress as the NFT created by the caller. It doesn't give royalties to the user but helps to provide dynamic UI.\"},\"buyItem(address,uint256)\":{\"notice\":\"Buys an NFT which is on sale in the marketplace\"},\"cancelListing(address,uint256)\":{\"notice\":\"Cancels a listing by the user in the marketplace\"},\"constructor\":{\"notice\":\"Initializes the marketplace and owner of the contract.\"},\"getListing(address,uint256)\":{\"notice\":\"Getter functions\"},\"listItem(address,uint256,uint256)\":{\"notice\":\"Lists an NFT for sale on the marketplace\"},\"updateListing(address,uint256,uint256)\":{\"notice\":\"Updates a listing by the user which is on sale in the marketplace\"},\"withdrawProceeds()\":{\"notice\":\"Withdraws the earnings made by the user in the marketplace\"}},\"notice\":\"A marketplace for NFTs with the sixth sense\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NeuralNFTMarketplace.sol\":\"NeuralNFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NeuralNFTMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nerror NeuralNFTMarketplace__PriceMustBeAboveZero();\\r\\nerror NeuralNFTMarketplace__NotApprovedForMarketplace();\\r\\nerror NeuralNFTMarketplace__AlreadyListed(address nftAddress, uint256 tokenId);\\r\\nerror NeuralNFTMarketplace__NotOwner();\\r\\nerror NeuralNFTMarketplace__NotListed(address nftAddress, uint256 tokenId);\\r\\nerror NeuralNFTMarketplace__PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\\r\\nerror NeuralNFTMarketplace__NoProceeds();\\r\\nerror NeuralNFTMarketplace__TransferFailed();\\r\\nerror NeuralNFTMarketplace__InsufficientFunds();\\r\\nerror NeuralNFTMarketplace__AlreadyApproved();\\r\\n\\r\\n/**\\r\\n * @author Gabriel Antony Xaviour\\r\\n * @title NeuralNFTMarketplace\\r\\n * @notice A marketplace for NFTs with the sixth sense\\r\\n * @dev Contract secured and protected by a reentrancy guard.\\r\\n */\\r\\ncontract NeuralNFTMarketplace is ReentrancyGuard {\\r\\n    // Structures\\r\\n    struct Listing {\\r\\n        uint256 price;\\r\\n        address seller;\\r\\n    }\\r\\n\\r\\n    // Constant variables\\r\\n    uint256 public constant PLATFORM_FEE = 2;\\r\\n    uint256 public constant LIST_FEE = 0.001 ether;\\r\\n\\r\\n    // Immutable variable\\r\\n    address private immutable i_owner;\\r\\n\\r\\n    // State variables\\r\\n    mapping(address => mapping(uint256 => Listing)) private s_listings; // nftAddress => tokenId => listing\\r\\n    mapping(address => uint256) private s_earnings; // user => earnings\\r\\n    mapping(address => bool) private s_approvedForMarketplace; // nftAddress => approvedOrNot?\\r\\n\\r\\n    /// @dev Fired for indexing data using theGraph protocol (https://thegraph.com/docs/en/about/)\\r\\n    event ItemListed(\\r\\n        address indexed seller,\\r\\n        address indexed nftAddress,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event ItemBought(\\r\\n        address indexed buyer,\\r\\n        address indexed nftAddress,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event ItemCancelled(\\r\\n        address indexed seller,\\r\\n        address indexed nftAddress,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    event ApprovedNftAddress(address indexed owner, address indexed nftAddress);\\r\\n\\r\\n    /// @notice Modifiers pre-defined for cleaner code\\r\\n    modifier notListed(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address owner\\r\\n    ) {\\r\\n        Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n        if (listing.price > 0) {\\r\\n            revert NeuralNFTMarketplace__AlreadyListed(nftAddress, tokenId);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    modifier isListed(address nftAddress, uint256 tokenId) {\\r\\n        Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n        if (listing.price <= 0) {\\r\\n            revert NeuralNFTMarketplace__NotListed(nftAddress, tokenId);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    modifier isOwner(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address spender\\r\\n    ) {\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        address owner = nft.ownerOf(tokenId);\\r\\n        if (spender != owner) {\\r\\n            revert NeuralNFTMarketplace__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes the marketplace and owner of the contract.\\r\\n    constructor() {\\r\\n        i_owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // Receive and Fallback functions\\r\\n    receive() external payable {\\r\\n        s_earnings[i_owner] += msg.value;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        s_earnings[i_owner] += msg.value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Lists an NFT for sale on the marketplace\\r\\n     * @param nftAddress The address of the contract of the NFT\\r\\n     * @param tokenId The ID of the NFT in the NFT contract\\r\\n     * @param price The desired listing price by the seller\\r\\n     */\\r\\n    function listItem(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    )\\r\\n        public\\r\\n        payable\\r\\n        notListed(nftAddress, tokenId, msg.sender)\\r\\n        isOwner(nftAddress, tokenId, msg.sender)\\r\\n    {\\r\\n        if (msg.value < LIST_FEE) {\\r\\n            revert NeuralNFTMarketplace__InsufficientFunds();\\r\\n        }\\r\\n        if (price <= 0) {\\r\\n            revert NeuralNFTMarketplace__PriceMustBeAboveZero();\\r\\n        }\\r\\n\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        if (nft.getApproved(tokenId) != address(this)) {\\r\\n            revert NeuralNFTMarketplace__NotApprovedForMarketplace();\\r\\n        }\\r\\n\\r\\n        s_earnings[i_owner] += msg.value;\\r\\n        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\\r\\n        emit ItemListed(msg.sender, nftAddress, tokenId, price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buys an NFT which is on sale in the marketplace\\r\\n     * @param nftAddress The address of the contract of the NFT\\r\\n     * @param tokenId The ID of the NFT in the NFT contract\\r\\n     */\\r\\n    function buyItem(address nftAddress, uint256 tokenId)\\r\\n        external\\r\\n        payable\\r\\n        isListed(nftAddress, tokenId)\\r\\n        nonReentrant\\r\\n    {\\r\\n        Listing memory listing = s_listings[nftAddress][tokenId];\\r\\n        if (msg.value < listing.price) {\\r\\n            revert NeuralNFTMarketplace__PriceNotMet(address(this), tokenId, listing.price);\\r\\n        }\\r\\n        s_earnings[listing.seller] =\\r\\n            s_earnings[listing.seller] +\\r\\n            (msg.value * (100 - PLATFORM_FEE)) /\\r\\n            100;\\r\\n        s_earnings[i_owner] = (msg.value * PLATFORM_FEE) / 100;\\r\\n        delete (s_listings[nftAddress][tokenId]);\\r\\n\\r\\n        IERC721(nftAddress).safeTransferFrom(listing.seller, msg.sender, tokenId);\\r\\n        emit ItemBought(msg.sender, nftAddress, tokenId, listing.price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cancels a listing by the user in the marketplace\\r\\n     * @param nftAddress The address of the contract of the NFT\\r\\n     * @param tokenId The ID of the NFT in the NFT contract\\r\\n     */\\r\\n    function cancelListing(address nftAddress, uint256 tokenId)\\r\\n        external\\r\\n        isOwner(nftAddress, tokenId, msg.sender)\\r\\n        isListed(nftAddress, tokenId)\\r\\n        nonReentrant\\r\\n    {\\r\\n        delete (s_listings[nftAddress][tokenId]);\\r\\n        emit ItemCancelled(msg.sender, nftAddress, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates a listing by the user which is on sale in the marketplace\\r\\n     * @param nftAddress The address of the contract of the NFT\\r\\n     * @param tokenId The ID of the NFT in the NFT contract\\r\\n     * @param newPrice The updated listing price proposed by the seller\\r\\n     */\\r\\n    function updateListing(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 newPrice\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        nonReentrant\\r\\n        isOwner(nftAddress, tokenId, msg.sender)\\r\\n        isListed(nftAddress, tokenId)\\r\\n    {\\r\\n        if (msg.value < LIST_FEE) {\\r\\n            revert NeuralNFTMarketplace__InsufficientFunds();\\r\\n        }\\r\\n        if (newPrice <= 0) {\\r\\n            revert NeuralNFTMarketplace__PriceMustBeAboveZero();\\r\\n        }\\r\\n        s_earnings[i_owner] += msg.value;\\r\\n        s_listings[nftAddress][tokenId].price = newPrice;\\r\\n        emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws the earnings made by the user in the marketplace\\r\\n     * @dev Reentrancy guard put into action preventing multiple calls to this function\\r\\n     */\\r\\n    function withdrawProceeds() external nonReentrant {\\r\\n        uint256 proceeds = s_earnings[msg.sender];\\r\\n        if (proceeds <= 0) {\\r\\n            revert NeuralNFTMarketplace__NoProceeds();\\r\\n        }\\r\\n        s_earnings[msg.sender] = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert NeuralNFTMarketplace__TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Showcases all the NFTs in this nftAddress as the NFT created by the caller.\\r\\n     * It doesn't give royalties to the user but helps to provide dynamic UI.\\r\\n     * @param nftAddress The address of the contract of the NFT\\r\\n     */\\r\\n    function approveNftAddress(address nftAddress) public {\\r\\n        if (s_approvedForMarketplace[nftAddress]) {\\r\\n            revert NeuralNFTMarketplace__AlreadyApproved();\\r\\n        }\\r\\n\\r\\n        s_approvedForMarketplace[nftAddress] = true;\\r\\n\\r\\n        emit ApprovedNftAddress(msg.sender, nftAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Getter functions\\r\\n    function getListing(address nftAddress, uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (Listing memory)\\r\\n    {\\r\\n        return s_listings[nftAddress][tokenId];\\r\\n    }\\r\\n\\r\\n    function getEarnings(address seller) external view returns (uint256) {\\r\\n        return s_earnings[seller];\\r\\n    }\\r\\n\\r\\n    function isApproved(address nftAddress) external view returns (bool) {\\r\\n        return s_approvedForMarketplace[nftAddress];\\r\\n    }\\r\\n\\r\\n    function getListFee() external pure returns (uint256) {\\r\\n        return LIST_FEE;\\r\\n    }\\r\\n\\r\\n    function getPlatformFee() external pure returns (uint256) {\\r\\n        return PLATFORM_FEE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf04bd3cb6bfc6195f0a7d3642df0bfec5bbfc19ef4868ea42bddf7531d066fb2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060016000819055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c611fa66100896000396000818160d20152818161014a015281816108da01528181610f9001526118b00152611fa66000f3fe6080604052600436106100c65760003560e01c806389bfd38f1161007f578063b2ddee0611610059578063b2ddee0614610342578063e3e0c4c91461036b578063f772adf114610394578063fb513492146103b057610143565b806389bfd38f146102f35780639038e6931461030f5780639f37092a1461032657610143565b8063131b9c04146101bb578063187f026f146101f857806334fbc9a114610223578063673448dd1461024e5780636ea8bc101461028b57806388700d1c146102b657610143565b366101435734600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461013a9190611d56565b92505081905550005b34600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101b29190611d56565b92505081905550005b3480156101c757600080fd5b506101e260048036038101906101dd9190611a70565b6103db565b6040516101ef9190611d1f565b60405180910390f35b34801561020457600080fd5b5061020d610424565b60405161021a9190611d1f565b60405180910390f35b34801561022f57600080fd5b5061023861042f565b6040516102459190611d1f565b60405180910390f35b34801561025a57600080fd5b5061027560048036038101906102709190611a70565b610434565b6040516102829190611cc9565b60405180910390f35b34801561029757600080fd5b506102a061048a565b6040516102ad9190611d1f565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d89190611aca565b610493565b6040516102ea9190611d04565b60405180910390f35b61030d60048036038101906103089190611b0a565b61055e565b005b34801561031b57600080fd5b50610324610a8d565b005b610340600480360381019061033b9190611aca565b610c4d565b005b34801561034e57600080fd5b5061036960048036038101906103649190611aca565b61115c565b005b34801561037757600080fd5b50610392600480360381019061038d9190611a70565b6114a1565b005b6103ae60048036038101906103a99190611b0a565b6115da565b005b3480156103bc57600080fd5b506103c56119f2565b6040516103d29190611d1f565b60405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b66038d7ea4c6800081565b600281565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60006002905090565b61049b611a01565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b8282336000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151111561066c5783836040517f931ab048000000000000000000000000000000000000000000000000000000008152600401610663929190611c69565b60405180910390fd5b868633600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016106af9190611d1f565b60206040518083038186803b1580156106c757600080fd5b505afa1580156106db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff9190611a9d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610766576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b66038d7ea4c680003410156107a7576040517fade20f9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a116107e1576040517ff1c64ea600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008c90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8e6040518263ffffffff1660e01b81526004016108369190611d1f565b60206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190611a9d565b73ffffffffffffffffffffffffffffffffffffffff16146108d3576040517f913365f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109429190611d56565b9250508190555060405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e604051610a769190611d1f565b60405180910390a450505050505050505050505050565b60026000541415610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca90611ce4565b60405180910390fd5b60026000819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610b59576040517f22be094a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610bc490611c1d565b60006040518083038185875af1925050503d8060008114610c01576040519150601f19603f3d011682016040523d82523d6000602084013e610c06565b606091505b5050905080610c41576040517f1413ec4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506001600081905550565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610d595782826040517f8b33057a000000000000000000000000000000000000000000000000000000008152600401610d50929190611c69565b60405180910390fd5b60026000541415610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9690611ce4565b60405180910390fd5b60026000819055506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151341015610eb757308582600001516040517f01940db8000000000000000000000000000000000000000000000000000000008152600401610eae93929190611c92565b60405180910390fd5b606460026064610ec79190611e37565b34610ed29190611ddd565b610edc9190611dac565b60026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2a9190611d56565b60026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506064600234610f809190611ddd565b610f8a9190611dac565b600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b81526004016110b093929190611c32565b600060405180830381600087803b1580156110ca57600080fd5b505af11580156110de573d6000803e3d6000fd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac18784600001516040516111449190611d1f565b60405180910390a45060016000819055505050505050565b818133600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161119f9190611d1f565b60206040518083038186803b1580156111b757600080fd5b505afa1580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef9190611a9d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611256576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116113625782826040517f8b33057a000000000000000000000000000000000000000000000000000000008152600401611359929190611c69565b60405180910390fd5b600260005414156113a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139f90611ce4565b60405180910390fd5b6002600081905550600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050888a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6e08c1d889d309942730e4afa7963d0c5294a34a479f2c8cf39a953f287dcdee60405160405180910390a4600160008190555050505050505050505050565b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611525576040517f2accba6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fda4ab09bb3bd149eb53e0e389f93b5cdab4094d360e1eb85a7d5dcf7721d3ff260405160405180910390a350565b60026000541415611620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161790611ce4565b60405180910390fd5b6002600081905550828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161166b9190611d1f565b60206040518083038186803b15801561168357600080fd5b505afa158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190611a9d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611722576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87876000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511161182e5782826040517f8b33057a000000000000000000000000000000000000000000000000000000008152600401611825929190611c69565b60405180910390fd5b66038d7ea4c6800034101561186f576040517fade20f9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089116118a9576040517ff1c64ea600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119189190611d56565b9250508190555088600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060000181905550898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48c6040516119d59190611d1f565b60405180910390a450505050505050506001600081905550505050565b600066038d7ea4c68000905090565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600081359050611a4081611f42565b92915050565b600081519050611a5581611f42565b92915050565b600081359050611a6a81611f59565b92915050565b600060208284031215611a8657611a85611f11565b5b6000611a9484828501611a31565b91505092915050565b600060208284031215611ab357611ab2611f11565b5b6000611ac184828501611a46565b91505092915050565b60008060408385031215611ae157611ae0611f11565b5b6000611aef85828601611a31565b9250506020611b0085828601611a5b565b9150509250929050565b600080600060608486031215611b2357611b22611f11565b5b6000611b3186828701611a31565b9350506020611b4286828701611a5b565b9250506040611b5386828701611a5b565b9150509250925092565b611b6681611e6b565b82525050565b611b7581611e6b565b82525050565b611b8481611e7d565b82525050565b6000611b97600083611d3a565b9150611ba282611f16565b600082019050919050565b6000611bba601f83611d45565b9150611bc582611f19565b602082019050919050565b604082016000820151611be66000850182611bff565b506020820151611bf96020850182611b5d565b50505050565b611c0881611ea9565b82525050565b611c1781611ea9565b82525050565b6000611c2882611b8a565b9150819050919050565b6000606082019050611c476000830186611b6c565b611c546020830185611b6c565b611c616040830184611c0e565b949350505050565b6000604082019050611c7e6000830185611b6c565b611c8b6020830184611c0e565b9392505050565b6000606082019050611ca76000830186611b6c565b611cb46020830185611c0e565b611cc16040830184611c0e565b949350505050565b6000602082019050611cde6000830184611b7b565b92915050565b60006020820190508181036000830152611cfd81611bad565b9050919050565b6000604082019050611d196000830184611bd0565b92915050565b6000602082019050611d346000830184611c0e565b92915050565b600081905092915050565b600082825260208201905092915050565b6000611d6182611ea9565b9150611d6c83611ea9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611da157611da0611eb3565b5b828201905092915050565b6000611db782611ea9565b9150611dc283611ea9565b925082611dd257611dd1611ee2565b5b828204905092915050565b6000611de882611ea9565b9150611df383611ea9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e2c57611e2b611eb3565b5b828202905092915050565b6000611e4282611ea9565b9150611e4d83611ea9565b925082821015611e6057611e5f611eb3565b5b828203905092915050565b6000611e7682611e89565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b50565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b611f4b81611e6b565b8114611f5657600080fd5b50565b611f6281611ea9565b8114611f6d57600080fd5b5056fea26469706673582212206cea9bdb42475c9347b3e89ca37e555c034f9cb0b2d5357f321b84b1e84e4fc264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c806389bfd38f1161007f578063b2ddee0611610059578063b2ddee0614610342578063e3e0c4c91461036b578063f772adf114610394578063fb513492146103b057610143565b806389bfd38f146102f35780639038e6931461030f5780639f37092a1461032657610143565b8063131b9c04146101bb578063187f026f146101f857806334fbc9a114610223578063673448dd1461024e5780636ea8bc101461028b57806388700d1c146102b657610143565b366101435734600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461013a9190611d56565b92505081905550005b34600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101b29190611d56565b92505081905550005b3480156101c757600080fd5b506101e260048036038101906101dd9190611a70565b6103db565b6040516101ef9190611d1f565b60405180910390f35b34801561020457600080fd5b5061020d610424565b60405161021a9190611d1f565b60405180910390f35b34801561022f57600080fd5b5061023861042f565b6040516102459190611d1f565b60405180910390f35b34801561025a57600080fd5b5061027560048036038101906102709190611a70565b610434565b6040516102829190611cc9565b60405180910390f35b34801561029757600080fd5b506102a061048a565b6040516102ad9190611d1f565b60405180910390f35b3480156102c257600080fd5b506102dd60048036038101906102d89190611aca565b610493565b6040516102ea9190611d04565b60405180910390f35b61030d60048036038101906103089190611b0a565b61055e565b005b34801561031b57600080fd5b50610324610a8d565b005b610340600480360381019061033b9190611aca565b610c4d565b005b34801561034e57600080fd5b5061036960048036038101906103649190611aca565b61115c565b005b34801561037757600080fd5b50610392600480360381019061038d9190611a70565b6114a1565b005b6103ae60048036038101906103a99190611b0a565b6115da565b005b3480156103bc57600080fd5b506103c56119f2565b6040516103d29190611d1f565b60405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b66038d7ea4c6800081565b600281565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60006002905090565b61049b611a01565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b8282336000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151111561066c5783836040517f931ab048000000000000000000000000000000000000000000000000000000008152600401610663929190611c69565b60405180910390fd5b868633600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016106af9190611d1f565b60206040518083038186803b1580156106c757600080fd5b505afa1580156106db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff9190611a9d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610766576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b66038d7ea4c680003410156107a7576040517fade20f9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a116107e1576040517ff1c64ea600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008c90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8e6040518263ffffffff1660e01b81526004016108369190611d1f565b60206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190611a9d565b73ffffffffffffffffffffffffffffffffffffffff16146108d3576040517f913365f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109429190611d56565b9250508190555060405180604001604052808c81526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508b8d73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e604051610a769190611d1f565b60405180910390a450505050505050505050505050565b60026000541415610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca90611ce4565b60405180910390fd5b60026000819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610b59576040517f22be094a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610bc490611c1d565b60006040518083038185875af1925050503d8060008114610c01576040519150601f19603f3d011682016040523d82523d6000602084013e610c06565b606091505b5050905080610c41576040517f1413ec4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506001600081905550565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816000015111610d595782826040517f8b33057a000000000000000000000000000000000000000000000000000000008152600401610d50929190611c69565b60405180910390fd5b60026000541415610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9690611ce4565b60405180910390fd5b60026000819055506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060000151341015610eb757308582600001516040517f01940db8000000000000000000000000000000000000000000000000000000008152600401610eae93929190611c92565b60405180910390fd5b606460026064610ec79190611e37565b34610ed29190611ddd565b610edc9190611dac565b60026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f2a9190611d56565b60026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506064600234610f809190611ddd565b610f8a9190611dac565b600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508573ffffffffffffffffffffffffffffffffffffffff166342842e0e826020015133886040518463ffffffff1660e01b81526004016110b093929190611c32565b600060405180830381600087803b1580156110ca57600080fd5b505af11580156110de573d6000803e3d6000fd5b50505050848673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac18784600001516040516111449190611d1f565b60405180910390a45060016000819055505050505050565b818133600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161119f9190611d1f565b60206040518083038186803b1580156111b757600080fd5b505afa1580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef9190611a9d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611256576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905060008160000151116113625782826040517f8b33057a000000000000000000000000000000000000000000000000000000008152600401611359929190611c69565b60405180910390fd5b600260005414156113a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139f90611ce4565b60405180910390fd5b6002600081905550600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050888a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6e08c1d889d309942730e4afa7963d0c5294a34a479f2c8cf39a953f287dcdee60405160405180910390a4600160008190555050505050505050505050565b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611525576040517f2accba6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fda4ab09bb3bd149eb53e0e389f93b5cdab4094d360e1eb85a7d5dcf7721d3ff260405160405180910390a350565b60026000541415611620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161790611ce4565b60405180910390fd5b6002600081905550828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161166b9190611d1f565b60206040518083038186803b15801561168357600080fd5b505afa158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190611a9d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611722576040517f2ac3f91100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87876000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511161182e5782826040517f8b33057a000000000000000000000000000000000000000000000000000000008152600401611825929190611c69565b60405180910390fd5b66038d7ea4c6800034101561186f576040517fade20f9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600089116118a9576040517ff1c64ea600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600260007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119189190611d56565b9250508190555088600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060000181905550898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48c6040516119d59190611d1f565b60405180910390a450505050505050506001600081905550505050565b600066038d7ea4c68000905090565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600081359050611a4081611f42565b92915050565b600081519050611a5581611f42565b92915050565b600081359050611a6a81611f59565b92915050565b600060208284031215611a8657611a85611f11565b5b6000611a9484828501611a31565b91505092915050565b600060208284031215611ab357611ab2611f11565b5b6000611ac184828501611a46565b91505092915050565b60008060408385031215611ae157611ae0611f11565b5b6000611aef85828601611a31565b9250506020611b0085828601611a5b565b9150509250929050565b600080600060608486031215611b2357611b22611f11565b5b6000611b3186828701611a31565b9350506020611b4286828701611a5b565b9250506040611b5386828701611a5b565b9150509250925092565b611b6681611e6b565b82525050565b611b7581611e6b565b82525050565b611b8481611e7d565b82525050565b6000611b97600083611d3a565b9150611ba282611f16565b600082019050919050565b6000611bba601f83611d45565b9150611bc582611f19565b602082019050919050565b604082016000820151611be66000850182611bff565b506020820151611bf96020850182611b5d565b50505050565b611c0881611ea9565b82525050565b611c1781611ea9565b82525050565b6000611c2882611b8a565b9150819050919050565b6000606082019050611c476000830186611b6c565b611c546020830185611b6c565b611c616040830184611c0e565b949350505050565b6000604082019050611c7e6000830185611b6c565b611c8b6020830184611c0e565b9392505050565b6000606082019050611ca76000830186611b6c565b611cb46020830185611c0e565b611cc16040830184611c0e565b949350505050565b6000602082019050611cde6000830184611b7b565b92915050565b60006020820190508181036000830152611cfd81611bad565b9050919050565b6000604082019050611d196000830184611bd0565b92915050565b6000602082019050611d346000830184611c0e565b92915050565b600081905092915050565b600082825260208201905092915050565b6000611d6182611ea9565b9150611d6c83611ea9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611da157611da0611eb3565b5b828201905092915050565b6000611db782611ea9565b9150611dc283611ea9565b925082611dd257611dd1611ee2565b5b828204905092915050565b6000611de882611ea9565b9150611df383611ea9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e2c57611e2b611eb3565b5b828202905092915050565b6000611e4282611ea9565b9150611e4d83611ea9565b925082821015611e6057611e5f611eb3565b5b828203905092915050565b6000611e7682611e89565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b50565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b611f4b81611e6b565b8114611f5657600080fd5b50565b611f6281611ea9565b8114611f6d57600080fd5b5056fea26469706673582212206cea9bdb42475c9347b3e89ca37e555c034f9cb0b2d5357f321b84b1e84e4fc264736f6c63430008070033",
  "devdoc": {
    "author": "Gabriel Antony Xaviour",
    "details": "Contract secured and protected by a reentrancy guard.",
    "events": {
      "ItemListed(address,address,uint256,uint256)": {
        "details": "Fired for indexing data using theGraph protocol (https://thegraph.com/docs/en/about/)"
      }
    },
    "kind": "dev",
    "methods": {
      "approveNftAddress(address)": {
        "params": {
          "nftAddress": "The address of the contract of the NFT"
        }
      },
      "buyItem(address,uint256)": {
        "params": {
          "nftAddress": "The address of the contract of the NFT",
          "tokenId": "The ID of the NFT in the NFT contract"
        }
      },
      "cancelListing(address,uint256)": {
        "params": {
          "nftAddress": "The address of the contract of the NFT",
          "tokenId": "The ID of the NFT in the NFT contract"
        }
      },
      "listItem(address,uint256,uint256)": {
        "params": {
          "nftAddress": "The address of the contract of the NFT",
          "price": "The desired listing price by the seller",
          "tokenId": "The ID of the NFT in the NFT contract"
        }
      },
      "updateListing(address,uint256,uint256)": {
        "params": {
          "newPrice": "The updated listing price proposed by the seller",
          "nftAddress": "The address of the contract of the NFT",
          "tokenId": "The ID of the NFT in the NFT contract"
        }
      },
      "withdrawProceeds()": {
        "details": "Reentrancy guard put into action preventing multiple calls to this function"
      }
    },
    "title": "NeuralNFTMarketplace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveNftAddress(address)": {
        "notice": "Showcases all the NFTs in this nftAddress as the NFT created by the caller. It doesn't give royalties to the user but helps to provide dynamic UI."
      },
      "buyItem(address,uint256)": {
        "notice": "Buys an NFT which is on sale in the marketplace"
      },
      "cancelListing(address,uint256)": {
        "notice": "Cancels a listing by the user in the marketplace"
      },
      "constructor": {
        "notice": "Initializes the marketplace and owner of the contract."
      },
      "getListing(address,uint256)": {
        "notice": "Getter functions"
      },
      "listItem(address,uint256,uint256)": {
        "notice": "Lists an NFT for sale on the marketplace"
      },
      "updateListing(address,uint256,uint256)": {
        "notice": "Updates a listing by the user which is on sale in the marketplace"
      },
      "withdrawProceeds()": {
        "notice": "Withdraws the earnings made by the user in the marketplace"
      }
    },
    "notice": "A marketplace for NFTs with the sixth sense",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 142,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2406,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "s_listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2391_storage))"
      },
      {
        "astId": 2410,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "s_earnings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2414,
        "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
        "label": "s_approvedForMarketplace",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)2391_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NeuralNFTMarketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)2391_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)2391_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NeuralNFTMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)2391_storage"
      },
      "t_struct(Listing)2391_storage": {
        "encoding": "inplace",
        "label": "struct NeuralNFTMarketplace.Listing",
        "members": [
          {
            "astId": 2388,
            "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2390,
            "contract": "contracts/NeuralNFTMarketplace.sol:NeuralNFTMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}